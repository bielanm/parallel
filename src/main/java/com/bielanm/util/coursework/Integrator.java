package com.bielanm.util.coursework;import java.util.stream.Collectors;import java.util.stream.IntStream;import java.util.stream.Stream;public class Integrator {    public static Double[][] solveImplicity(Double[] x, Double[] t, Double[] boundary, Double[] start, Double[] end, Pair<Valueable, Valueable> equation) {        Double[][] solution = new Double[boundary.length][start.length];        IntStream.range(0, solution.length).forEach(i -> IntStream.range(0, solution[i].length)                .forEach(j -> solution[i][j] = Double.valueOf(0)));        IntStream.range(0, start.length).boxed().forEach(i -> solution[0][i] = boundary[i]);        IntStream.range(0, start.length).boxed().forEach(i -> solution[i][0] = start[i]);        IntStream.range(0, start.length).boxed().forEach(i -> solution[i][boundary.length - 1] = end[i]);        for (int i = 0; i < solution.length; i++) {            for (int j = 0; j < solution[i].length; j++) {                System.out.print(solution[i][j] + " ");            }            System.out.println();        }        System.out.println();        Valueable abc = equation.getKey();        Valueable res = equation.getValue();        for (int i = 1; i < solution.length; i++) {            int size = solution[i].length;            Double[] A = new Double[size-2];            Double[] B = new Double[size-2];            Double[] C = new Double[size-2];            Double[] b = new Double[size-2];            for (int j = 0; j < size - 2; j++) {                A[j] = abc.value(1, 0, 0);                B[j] = abc.value(0, 1, 0);                C[j] = abc.value(0, 0, 1);                b[j] = res.value(solution[i-1][j]);            }            A[0] = Double.valueOf(0);            C[size-3] = Double.valueOf(0);            b[0] -= abc.value(1, 0, 0)*start[i];            b[size-3] -= abc.value(0, 0, 1)*end[i];            Double[] stepsolution = tridiagonalAlgorithm(A, B, C, b);            for (int j = 0; j < stepsolution.length; j++) {                solution[i][j+1] = stepsolution[j];            }        }        return solution;    }    private static Double[] tridiagonalAlgorithm(Double[] A, Double[] B, Double[] C, Double[] b) {        int size = A.length;        int center = size/2;        Double[] alpha = new Double[size];        Double[] betta = new Double[size];        Double[] omega = new Double[size];        Double[] tetta = new Double[size];        alpha[0] = Double.valueOf(0);        betta[0] = Double.valueOf(0);        for (int i = 0; i < center; i++) {            double gamma = (A[i]*alpha[i] + B[i]);            alpha[i+1] = -C[i]/gamma;            betta[i+1] = (b[i] - A[i]*betta[i])/gamma;        }        omega[size-1] = Double.valueOf(0);;        tetta[size-1] = Double.valueOf(0);;        for (int i = size - 1; i >= center; i--) {            double gamma = (C[i]*omega[i] + B[i]);            omega[i-1] = -A[i]/gamma;            tetta[i-1] = (b[i] - C[i]*tetta[i])/gamma;        }        Double xcenter = (betta[center]*omega[center-1] + tetta[center-1])/(1 - alpha[center]*omega[center-1]);        Double[] solutionMain = new Double[size];        Double[] solution = new Double[size];        solution[center] = xcenter;        solutionMain[center] = xcenter;        for (int i = center; i > 0; i--) {            solutionMain[i-1] = solutionMain[i]*alpha[i] +betta[i];        }        for (int i = center; i < size-1; i++) {            solution[i+1] = solution[i]*omega[i] +tetta[i];        }        for(int i = center+1; i < size; i++){            solutionMain[i] = solution[i];        }        return solutionMain;    }}